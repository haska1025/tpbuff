#!/usr/bin/perl -w

use strict;
use File::Find;
use Debian::Debhelper::Dh_Lib;

init();

# This variable can be used to turn off stripping (see Policy).
if (defined $ENV{DEB_BUILD_OPTIONS} && $ENV{DEB_BUILD_OPTIONS} =~ /nostrip/) {
	exit;
}

# I could just use /home/zixing.chen/trunk/network/tpbuff-1.0/debian/tang_strip[0]: ERROR: cannot open `/home/zixing.chen/trunk/network/tpbuff-1.0/debian/tang_strip[0]' (No such file or directory), but this is safer
sub get_file_type {
	my $file=shift;
	open (FILE, '-|') # handle all filenames safely
		|| exec('file', $file)
		|| die "can't exec file: $!";
	my $type=<FILE>;
	close FILE;
	return $type;
}

# Check if a file is an elf binary, shared library, or static library,
# for use by File::Find. It'll fill the following 3 arrays with anything
# it finds:
my (@shared_libs, @executables, @static_libs);
sub testfile {
	return if -l $_ or -d $_; # Skip directories and symlinks always.
	
	# See if we were asked to exclude this file.
	# Note that we have to test on the full filename, including directory.
	my $fn="$File::Find::dir/$_";
	foreach my $f (@{$dh{EXCLUDE}}) {
		return if ($fn=~m/\Q$f\E/);
	}

	# Is it a debug library in a debug subdir?
	return if $fn=~m/debug\/.*\.so/;
	# Is it a debug file.
        return if $fn=~m/\.debug/;

	# Does its filename look like a shared library?
	if (m/.*\.so.*?/) {
		# Ok, do the expensive test.
		my $type=get_file_type($_);
		if ($type=~m/.*ELF.*shared.*/) {
			push @shared_libs, $fn;
			return;
		}
	}
	
	# Is it executable? -x isn't good enough, so we need to use stat.
	my (undef,undef,$mode,undef)=stat(_);
	if ($mode & 0111) {
		# Ok, expensive test.
		my $type=get_file_type($_);
		if ($type=~m/.*ELF.*(executable|shared).*/) {
			push @executables, $fn;
			return;
		}
	}
	
	# Is it a static library, and not a debug library?
	if (m/lib.*\.a$/ && ! m/.*_g\.a$/) {
		# Is it a binary file, or something else (maybe a liner
		# script on Hurd, for example? I don't use file, because
		# file returns a varity of things on static libraries.
		if (-B $_) {
			push @static_libs, $fn;
			return;
		}
	}
}

sub make_debug {
	my $file=shift;
	my $tmp=shift;
	my $desttmp=shift;
	
	# Don't try to copy debug symbols out if the file is already
	# stripped.
	return unless get_file_type($file) =~ /not stripped/;

	my ($base_file)=$file=~/^\Q$tmp\E(.*)/;
	my $debug_path=$desttmp.$base_file.".debug";
	my $debug_dir=dirname($debug_path);
	if (! -d $debug_dir) {
		doit("install", "-d", $debug_dir);
	}

	doit("objcopy", "--only-keep-debug", $file, $debug_path);
	# No reason for this to be executable.
	doit("chmod", 644, $debug_path);
	return $debug_path;
}

sub attach_debug {
	my $file=shift;
	my $debug_path=shift;
	doit("objcopy", "--add-gnu-debuglink", $debug_path, $file);
}

foreach my $package (@{$dh{DOPACKAGES}}) {
	my $tmp=tmpdir($package);

	# Support for keeping the debugging symbols in a detached file.
	my $keep_debug=$dh{K_FLAG};
	my $debugtmp=$tmp;
	if (! compat(4)) {
		if (ref $dh{DEBUGPACKAGES}) {
			$keep_debug=1;
			# Note that it's only an array for the v4 stuff;
			# for v5 only one value is used.
			my $debugpackage=@{$dh{DEBUGPACKAGES}}[0];
			if (! grep { $_ eq $debugpackage } getpackages()) {
				error("debug package $debugpackage is not listed in the control file");
			}
			$debugtmp=tmpdir($debugpackage);
		}
	}
	else {
		if (ref $dh{DEBUGPACKAGES} && grep { $_ eq $package } @{$dh{DEBUGPACKAGES}}) {
			$keep_debug=1;
			$debugtmp=tmpdir($package."-dbg");
		}
	}
	
	@shared_libs=@executables=@static_libs=();
	find(\&testfile,$tmp);

	foreach (@shared_libs) {
		my $debug_path = make_debug($_, $tmp, $debugtmp) if $keep_debug;
		# Note that all calls to strip on shared libs
		# *must* inclde the --strip-unneeded.
		doit("strip","--remove-section=.comment",
			"--remove-section=.note","--strip-unneeded",$_);
		attach_debug($_, $debug_path) if defined $debug_path;
	}
	
	foreach (@executables) {
		my $debug_path = make_debug($_, $tmp, $debugtmp) if $keep_debug;
		doit("strip","--remove-section=.comment",
			"--remove-section=.note",$_);
 		attach_debug($_, $debug_path) if defined $debug_path;
	}

	foreach (@static_libs) {
		doit("strip","--strip-debug",$_);
	}
}

